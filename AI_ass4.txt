def displayBoard(board):
    for i in range(len(board)):
        for j in range(len(board)):
            print(board[i][j], end=" ")
        print("")

def isSafe(possible, j, k, n):
    # Checking if entire column (k) is safe
    for r in range(0, j):
        if possible[r][k] == 'Q':  # Changing Row
            return False

    # Checking if left diagonal is safe (left to right)
    sub = min(j, k)
    left_j = j - sub
    left_k = k - sub
    while left_j < j and left_k < k:
        if possible[left_j][left_k] == 'Q':
            return False
        else:
            left_j += 1
            left_k += 1

    # Checking if right diagonal is safe (right to left) (chk only in one direction)
    right_j = j
    right_k = k
    while right_j >= 0 and right_k < n:
        if possible[right_j][right_k] == 'Q':
            return False
        else:
            right_j -= 1
            right_k += 1

    return True

def solve_n_queens_util(board, row, n):
    if row == n:
        return True

    for i in range(n):
        if isSafe(board, row, i, n):
            board[row][i] = 'Q'
            if solve_n_queens_util(board, row + 1, n):
                return True
            board[row][i] = '_'

    return False

def solve_n_queens(n):
    board = [['_'] * n for _ in range(n)]
    if not solve_n_queens_util(board, 0, n):
        print("NO SOLUTION FOUND !!!")
    else:
        print("\n\n POSSIBLE SOLUTION IS ")
        displayBoard(board)


n = int(input("ENTER SIZE OF CHESS BOARD = "))
solve_n_queens(n)






####OUTPUT;;


PS C:\Users\hp\Desktop\AI> python assi4.py
ENTER SIZE OF CHESS BOARD = 4


 POSSIBLE SOLUTION IS
_ Q _ _
_ _ _ Q
Q _ _ _
_ _ Q _
PS C:\Users\hp\Desktop\AI> python assi4.py
ENTER SIZE OF CHESS BOARD = 8


 POSSIBLE SOLUTION IS
Q _ _ _ _ _ _ _
_ _ _ _ Q _ _ _
_ _ _ _ _ _ _ Q
_ _ _ _ _ Q _ _
_ _ Q _ _ _ _ _
_ _ _ _ _ _ Q _
_ Q _ _ _ _ _ _
_ _ _ Q _ _ _ _
PS C:\Users\hp\Desktop\AI>
